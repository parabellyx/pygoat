name: Build
on:
  push:
    branches:
      - master # or the name of your main branch

# jobs:
#   build:
#     name: Build
#     runs-on: windows-latest
#     steps:
      # - name: Set up JDK 11
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: 1.11
      # - uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # - name: Cache SonarQube packages
      #   uses: actions/cache@v1
      #   with:
      #     path: ~\sonar\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache SonarQube scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v1
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner
      # - name: Install SonarQube scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   shell: powershell
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      # - name: Build and analyze
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #   shell: powershell
      #   run: |
      #     cd src
      #     ..\.sonar\scanner\dotnet-sonarscanner begin /k:"securebank" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
      #     dotnet build
      #    ..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      # - name: Generate XML SBOM
      #   uses: CycloneDX/gh-dotnet-generate-sbom@v1
      #   with:
      #     path: ./src/SecureBank.sln
      #     github-bearer-token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Upload SBOM
      #   shell: bash
      #   run: |
      #     curl -X "POST" "https://${{ secrets.DTURL }}/api/v1/bom" -H "X-Api-Key: ${{ secrets.DEPENDENCYTRACK_APIKEY }}" -F "project=${{ secrets.DEPENDENCYTRACK_UUID }}" -F "bom=@bom.xml"
      # - name: Upload SBOM
      #   uses: DependencyTrack/gh-upload-sbom@v1.0.0
      #   with:
      #     serverhostname: '${{ secrets.DTURL }}'
      #     projectname: 'SecureBank'
      #     projectversion: 'master'
      #     apikey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
      # - name: Semgrep scan
      #   shell: bash
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install semgrep
      #     semgrep ci --json

jobs:
  semgrep:
    # User-definable name of this GitHub Actions job:
    name: Scan
    # If you are self-hosting, change the following `runs-on` value: 
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout.
      - uses: actions/checkout@v3
      - run: apk add curl
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci --json > semgrep.json || true 
        env:
           # Add the rules that Semgrep uses by setting the SEMGREP_RULES environment variable. 
           SEMGREP_RULES: p/default # more at semgrep.dev/explore
      - shell: bash
        run: |
          cat semgrep.json
          curl -X POST "https://${{ secrets.DJ_URL }}/api/v2/import-scan/" -H  "accept: application/json" -H  "Content-Type: multipart/form-data"  -H "Authorization: Token ${{ secrets.DJ_TOKEN }}" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Semgrep JSON Report" -F "close_old_findings=false" -F "push_to_jira=false" -F "product_name=${{ secrets.DJ_PRODUCT }}" -F "scan_date=$(date +%Y-%m-%d)" -F "engagement_name=$(date +%Y-%m)" -F "file=@semgrep.json"